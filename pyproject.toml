[tool.black]
line-length = 120
skip-string-normalization = true
extend-exclude = "^/(cmake/conan|dm/soda/proto)/"
[tool.pyright]
# see https://github.com/microsoft/pyright/blob/main/docs/configuration.md
pythonVersion = "3.11"
extraPaths = ["development/tools_pyroot"]
stubPath = "development/tools_pyroot/typings"
typeCheckingMode = "strict"
include = ["development/tools_pyroot"]
exclude = ["**/.*", "**/node_modules", "**/__pycache__", "**/build", "**/build*", "**/deploy-build", "**/clang_build", "**/research/united/all/ceph-analytics"]

executionEnvironments = [
  { root = "trading/crypto/scripts", extraPaths = ["crypto/scripts/src", "trading/crypto/scripts"] },
  { root = "crypto/scripts/src", extraPaths = ["crypto/scripts/src", "trading/crypto/scripts"] }
]

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportMissingModuleSource = "error"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "warning"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportMissingTypeStubs = "none"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "warning"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportInvalidTypeForm = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportPossiblyUnboundVariable = "error"
reportRedeclaration = "error"
reportReturnType = "error"
reportUnusedExcept = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportPrivateImportUsage = "none"
reportUnboundVariable = "error"
reportUnhashable = "error"
reportUnusedCoroutine = "error"
reportConstantRedefinition = "warning"
reportDeprecated = "warning"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "none"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "none"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "none"
reportOverlappingOverload = "error"
reportPrivateUsage = "none"
reportTypeCommentUsage = "error"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"  # not necessarily error because pyright assumes values of different types cannot be equal, and also protoc omits optionality
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "none"  # might make a warning or error once we have good pyright coverage
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "warning"  # might relax later?
reportUntypedClassDecorator = "none"
reportUntypedFunctionDecorator = "none"
reportUntypedNamedTuple = "none"
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "warning"
reportMissingSuperCall = "none"  # because it triggers even on init in class derived from object
reportPropertyTypeMismatch = "warning"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedCallResult = "none"
